@model List<NoteApp.Models.Note>

<h2>Note Dashboard</h2>

<div>
    <button id="createNote">Create Node</button>
</div>

<div id="notesContainer">
    @foreach (var note in Model)
    {
        <div class="note">
            <textarea id="content-@note.Id">@note.Content</textarea>
            <!-- The Save button should be rendered here -->
            <button class="saveNote" data-id="@note.Id">Save</button>
            <!-- The Share button -->
            <button class="shareNote" data-id="@note.Id">Share</button>
            <!-- The Delete button -->
            <button class="deleteNote" data-id="@note.Id">Delete</button>
        </div>
    }
</div>

@section Scripts {
    <script>
        // Event listener for creating new nodes
        document.getElementById("createNote").addEventListener("click", function () {
            fetch('@Url.Action("CreateNote")', { method: 'POST' })
                .then(() => location.reload());
        });

        // Event listener for saving node content
        document.querySelectorAll(".saveNote").forEach(button => {
            button.addEventListener("click", function () {
                const id = button.getAttribute("data-id");
                const content = document.getElementById(`content-${id}`).value; // Fetch content
                fetch(`@Url.Action("SaveNote")?id=${id}&content=${encodeURIComponent(content)}`, { method: 'POST' })
                    .then(() => location.reload());
            });
        });


        //Event listener for sharing nodes
        document.querySelectorAll(".shareNote").forEach(button => {
    button.addEventListener("click", function () {
        const id = button.getAttribute("data-id");
        
        alert(`Button clicked with ID: ${id}`); // Visible alert for debugging
        
        fetch(`/Home/ShareNote?id=${id}`)
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }
                return response.text();
            })
            .then(shortUrl => {
                alert(`Shortened URL: ${shortUrl}`); // Debugging: Show the URL in an alert

                if (navigator.clipboard) {
                    navigator.clipboard.writeText(shortUrl)
                        .then(() => {
                            alert("Link copied to clipboard!");
                        })
                        .catch(err => {
                            alert("Error copying to clipboard: " + err);
                        });
                } else {
                    alert("Clipboard API not supported. Use Ctrl+C to copy manually.");
                }
            })
            .catch(err => {
                alert("Error: " + err);
            });
    });
});

        // Event listener for deleting a node
        document.querySelectorAll(".deleteNote").forEach(button => {
            button.addEventListener("click", function () {
                const id = button.getAttribute("data-id");

                // Send a delete request to the server
                fetch(`@Url.Action("DeleteNote")?id=${id}`, { method: 'POST' })
                    .then(() => location.reload())
                    .catch(err => console.error("Could not delete node: ", err));
            });
        });
    </script>
}